-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/HarryPotterWiki#readme</a>
@package HarryPotterWiki
@version 0.1.0.0


-- | This Module performs http requests to get the HTML in return. It then
--   parses the HTML to extract Actor Info
module CastScraper
type ActorName = String
type URL = String
data Actor
Actor :: String -> String -> String -> String -> String -> Actor
[name] :: Actor -> String
[dob] :: Actor -> String
[nationality] :: Actor -> String
[cast_gender] :: Actor -> String
[role] :: Actor -> String

-- | This function builds the url using the ActorName in the correct
--   format. This helps render Actor info dynamically. It returns the url
--   to be scraped and parsed.
urlBuilder :: ActorName -> URL

-- | This function uses the tagsoup module to parse the requested HTML to a
--   list of tags. it takes in the url as a string it returns a list of
--   tags in the form, eg. "<a>hello</a>my&amp;amp;<a>/world</a>" ==
--   [TagOpen "hello" [],TagText "my&amp;",TagClose "world"]
getTags :: URL -> IO [Tag String]

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the actor's name
getActorName :: ActorName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the actor's date of birth
getActorDOB :: ActorName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the actor's date of nationality
getActorNationality :: ActorName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the actor's date of gender
getActorGender :: ActorName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the actor's role in harry potter
getActorRole :: ActorName -> IO String

-- | This function takes all the extracted info from the parsed HTML and
--   creates a new actor record The function takes in an actor name as
--   argument in the format "firstName_LastName". eg. <a>Emma_Watson</a> it
--   returns an Actor
getActorInfo :: ActorName -> IO Actor
instance GHC.Show.Show CastScraper.Actor


-- | This Module performs http requests to get the HTML in return. It then
--   parses the HTML to extract Character Info
module CharacterScraper
type CharacterName = String
type URL = String
data Character
Character :: String -> String -> String -> String -> String -> Character
[fname] :: Character -> String
[gender] :: Character -> String
[bloodStatus] :: Character -> String
[house] :: Character -> String
[patronus] :: Character -> String

-- | This function builds the url using the CharacterName in the correct
--   format. This helps render Actor info dynamically. It returns the url
--   to be scraped and parsed.
urlBuilder :: CharacterName -> URL

-- | This function uses the tagsoup module to parse the requested HTML to a
--   list of tags. it takes in the url as a string it returns a list of
--   tags in the form, eg. "<a>hello</a>my&amp;amp;<a>/world</a>" ==
--   [TagOpen "hello" [],TagText "my&amp;",TagClose "world"]
getTags :: URL -> IO [Tag String]

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the Character's full name
getFullName :: CharacterName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the Character's date of gender
getGender :: CharacterName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the Character's blood Status, eg. "Half-Blood"
getBloodStatus :: CharacterName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the Character's House, eg. <a>Gryffindor</a>
getHouse :: CharacterName -> IO String

-- | This function traverses through the html(parsed as a list of tags) and
--   extracts the Character's patronus, eg. "stag"
getPatronus :: CharacterName -> IO String

-- | This function takes all the extracted info from the parsed HTML and
--   creates a new Character record The function takes in an Character name
--   as argument in the format "firstName_LastName". eg.
--   <a>Harry_Potter</a> it returns an Character
newCharacter :: CharacterName -> IO Character
instance GHC.Show.Show CharacterScraper.Character


-- | This Module contains function that talks to the database. It contains
--   functions that stores the parse data from website into an SQlite3
--   database using HDBC It also contains functions that queries the
--   database to get interesting information
module ToDB

-- | This function initialises the cast table if doesn't exist The table
--   has 6 columns with the cast_id being the primary KEY It relates to the
--   character table with the role of the actors
initialiseCastDB :: Connection -> IO ()

-- | This function initialises the character table if doesn't exist The
--   table has 6 columns with the character_id being the primary KEY
initialiseCharacterDB :: Connection -> IO ()

-- | CharacterFromDB is a different type than the data type Character that
--   is imported from CharacterScraper. The Character data type from
--   CharacterScraper doesn't have a unique ID CharacterFromDB has an id
--   function
data CharacterFromDB
CharacterDB :: Integer -> String -> String -> String -> String -> String -> CharacterFromDB
[id] :: CharacterFromDB -> Integer
[fname] :: CharacterFromDB -> String
[gender] :: CharacterFromDB -> String
[bloodStatus] :: CharacterFromDB -> String
[house] :: CharacterFromDB -> String
[patronus] :: CharacterFromDB -> String

-- | ActorFromDB is a different type than the data type Actor that is
--   imported from CastScraper. The Actor data type from CastScraper
--   doesn't have a unique ID ActorFromDB has an id function
data ActorFromDB
ActorDB :: Integer -> String -> String -> String -> String -> String -> ActorFromDB
[cast_id] :: ActorFromDB -> Integer
[name] :: ActorFromDB -> String
[dob] :: ActorFromDB -> String
[nationality] :: ActorFromDB -> String
[cast_gender] :: ActorFromDB -> String
[role] :: ActorFromDB -> String

-- | This function converts Character (imported from CharacterScraper) to
--   list of Sql Values
characterToSqlValues :: Character -> [SqlValue]

-- | This function converts list of Sql values to CharacterFromDB data type
sqlValuesToCharacter :: [SqlValue] -> CharacterFromDB

-- | This function simply prepares an insert statement for the character
--   table
prepareInsertCharacterIOStmt :: Connection -> IO Statement

-- | This function inserts list of Characters parsed from the website into
--   the database
batchInsertCharacter :: [Character] -> IO ()

-- | This function uses a SELECT sql statement to query all the data from
--   the character table using a particular id
fetchAllValuesCharacter :: Int -> IO [CharacterFromDB]

-- | This function takes a character id as an input argument and returns
--   true if the id doesn't exist in the database
characterNotInDB :: Int -> IO Bool

-- | This function uses a SELECT sql statement to query all the data from
--   the character table with a particular House
fetchAllCharactersFromHouse :: String -> IO [CharacterFromDB]

-- | This function uses a SELECT sql statement to query all the data from
--   the character table with a particular Blood Status
fetchAllCharactersFromBloodStatus :: String -> IO [CharacterFromDB]

-- | This function converts Actor (imported from CastScraper) to list of
--   Sql Values
actorToSqlValues :: Actor -> [SqlValue]

-- | This function converts list of Sql values to ActorFromDB data type
sqlValuesToActor :: [SqlValue] -> ActorFromDB

-- | This function simply prepares an insert statement for the character
--   table
prepareInsertActorIOStmt :: Connection -> IO Statement

-- | This function inserts list of Actors parsed from the website into the
--   database
batchInsertActor :: [Actor] -> IO ()

-- | This function takes a cast id as an input argument and returns true if
--   the id doesn't exist in the database
actorNotInDB :: Int -> IO Bool

-- | This function uses a SELECT sql statement to query all the data from
--   the actor table using a particular id
fetchAllValuesActor :: Int -> IO [ActorFromDB]
instance GHC.Show.Show ToDB.ActorFromDB
instance GHC.Show.Show ToDB.CharacterFromDB


-- | This module basically creates the user interface that calls and
--   utilizes all the functions imported from CharacterScraper, CastScraper
--   and ToDB modules It also has some useful functions that beautifies the
--   user interface on the console
module UserMenu
mainActors :: [[Char]]

-- | This function first calls the getActorInfo and newCharacter functions
--   from CastScraper and CharacterScraper modules respectively, to
--   download information from the website It then calls the
--   batchInsertActor and batchInsertCharacter functions from ToDB module
--   to create and populate the sqlite database.
downloadCastInfo :: IO ()

-- | This function performs a DELETE sql statement to clear all the data
--   from the two table
deleteRecordFromDatabase :: IO ()

-- | This functions prints an Actor information queried from the database
--   in a beautiful and structured way.
printActor :: ActorFromDB -> IO ()

-- | This functions prints a Character information queried from the
--   database in a beautiful and structured way.
printCharacter :: CharacterFromDB -> IO ()

-- | This functions queries the cast table to fetch info about an actor
--   with a particular chosen by the user
searchByActorName :: IO ()

-- | This functions queries the character table to fetch info about a
--   character with a particular chosen by the user
searchByCharacterName :: IO ()

-- | This functions queries the character table to fetch info about all the
--   characters with a particular house chosen by the user
searchByCharacterHouse :: IO [()]

-- | This functions queries the character table to fetch info about all the
--   characters with a particular blood status chosen by the user
searchByCharacterBloodStatus :: IO [()]

-- | This function provides the user with options to query the database in
--   a particular way. It's an interactive user interface that only
--   terminates if the user press 0 and Enter
userMenu :: IO ()
